-- The solution of exercise 1.15
-- The sine of an angle (specified in radians) can be computed by making
-- use of the approximation: sin x = x + o(x ^ 3) -> sin x = x, if x is
-- sufficiently small, and the trigonometric identity
--
--     sin r = 3 * sin (r / 3) - 4 * sin (r / 3) ^ 3
--
-- to reduce the size of the argument of `sin`. (For purposes of this
-- exercise an angle is considered "sufficiently small" if its magnitude is
-- not greater than 0.1 radians.) These ideas are incorporated in the foll-
-- owing procedures:
--

import Debug.Trace

-- Use the default exponential function
cube x = x ^ 3
p x = trace ("p " ++ show x) $ 3 * x - 4 * cube x

-- The new sin function
sine :: (Ord a, Floating a, Show a) => a -> a
sine angle = trace ("sine " ++ show angle) $
  if abs angle <= 0.1
  then angle
  else p $ sine (angle / 3)

--
-- [1] How many times is the procedure p applied when (sine 12.15) is
--     evaluated?
--
-- [2] What is the order of growth in space and number of steps (as a
--     function of a) used by the process generated by the sine procedure
--     when (sine a) is evaluated?
--
-- Use trace function to see number of times the procedure is applied!
-- (,trace in guile interpreter.)
--
-- *Main> sine 12.15
-- sine 12.15
-- sine 4.05
-- sine 1.3499999999999999
-- sine 0.44999999999999996
-- sine 0.15
-- sine 4.9999999999999996e-2
-- p 4.9999999999999996e-2
-- p 0.1495
-- p 0.4351345505
-- p 0.9758465331678772
-- p -0.7895631144708228
-- -0.39980345741334
--
-- The procedure `p` is called 5 times!
-- The time and space complexity are both O(log a)
--



