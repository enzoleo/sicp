-- The solution of exercise 1.9
-- Each of the following two procedures defines a method for adding two
-- positive integers in terms of the procedures `inc`, which increments
-- its argument by 1, and `dec`, which decrements its arguments by 1.
-- Use the substitution model, illustrate the process generated by each
-- procedure in evaluating (plus 4 5). Are these processes iterative or
-- recursive?
--

import Debug.Trace

-- Two procedures do increments or decrements
inc x = trace ("inc(" ++ show x ++ ")") (x + 1)
dec x = trace ("dec(" ++ show x ++ ")") (x - 1)

-- The first plus procedure
firstPlus 0 b = b
firstPlus a b =
  trace ("a: " ++ show a ++ " b: " ++ show b) $
  inc $ firstPlus (dec a) b

-- The second plus procedure
secondPlus 0 b = b
secondPlus a b =
  trace ("a: " ++ show a ++ " b: " ++ show b) $
  secondPlus (dec a) (inc b)

-- Use trace to report every call to that plus procedure. This is really
-- useful to see the computing process.
-- Prelude> :l sicpc1e09.hs
-- [1 of 1] Compiling Main             ( sicpc1e09.hs, interpreted )
-- Ok, modules loaded: Main.
-- *Main> firstPlus 4 5
-- a: 4 b: 5
-- dec(4)
-- a: 3 b: 5
-- dec(3)
-- a: 2 b: 5
-- dec(2)
-- a: 1 b: 5
-- dec(1)
-- inc(5)
-- inc(6)
-- inc(7)
-- inc(8)
-- 9
-- *Main> secondPlus 4 5
-- a: 4 b: 5
-- dec(4)
-- inc(5)
-- a: 3 b: 6
-- dec(3)
-- inc(6)
-- a: 2 b: 7
-- dec(2)
-- inc(7)
-- a: 1 b: 8
-- dec(1)
-- inc(8)
-- 9


