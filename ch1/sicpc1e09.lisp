;; The solution of exercise 1.9
;; Each of the following two procedures defines a method for adding two
;; positive integers in terms of the procedures `inc`, which increments
;; its argument by 1, and `dec`, which decrements its arguments by 1.
;; Use the substitution model, illustrate the process generated by each
;; procedure in evaluating (plus 4 5). Are these processes iterative or
;; recursive?
;;
;; Open sbcl interactive mode. Follow the tips:
;; 
;; * (load "exercise_09.lisp")
;; * (trace first-plus)
;; * (first-plus 4 5)
;; * (trace second-plus)
;; * (second-plus 4 5)
;;
;; See what the interpreter will show.
;;

;; Two procedures do increments or decrements
(defun inc (x) (+ x 1))
(defun dec (x) (- x 1))

;; The first plus procedure
(defun first-plus (a b)
  (if (= a 0)
      b
      (inc (first-plus (dec a) b))))

;; The second plus procedure
(defun second-plus (a b)
  (if (= a 0)
      b
      (second-plus (dec a) (inc b))))

;; Use trace to report every call to that plus procedure. This is really
;; useful to see the computing process. But before doing that, check how
;; how to use trace to ensure the normal work of interpreter.
;;
;; Trace the two plus procedures:
;; The first plus procedure `first-plus` is recursive while the other
;; `second-plus` is iterative.
;; 
;; Here we use sbcl interactive mode:
;;
;; * (trace first-plus)
;;
;; (FIRST-PLUS)
;; * (first-plus 4 5)
;;   0: (FIRST-PLUS 4 5)
;;     1: (FIRST-PLUS 3 5)
;;       2: (FIRST-PLUS 2 5)
;;         3: (FIRST-PLUS 1 5)
;;           4: (FIRST-PLUS 0 5)
;;           4: FIRST-PLUS returned 5
;;         3: FIRST-PLUS returned 6
;;       2: FIRST-PLUS returned 7
;;     1: FIRST-PLUS returned 8
;;   0: FIRST-PLUS returned 9
;; 9
;; * 
;;
;; * (trace second-plus)
;; 
;; (SECOND-PLUS)
;; * (second-plus 4 5)
;;   0: (SECOND-PLUS 4 5)
;;     1: (SECOND-PLUS 3 6)
;;        2: (SECOND-PLUS 2 7)
;;           3: (SECOND-PLUS 1 8)
;;             4: (SECOND-PLUS 0 9)
;;             4: SECOND-PLUS returned 9
;;           3: SECOND-PLUS returned 9
;;        2: SECOND-PLUS returned 9
;;     1: SECOND-PLUS returned 9
;;   0: SECOND-PLUS returned 9
;; 9
;; *
;;


