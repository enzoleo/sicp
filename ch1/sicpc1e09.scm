;; The solution of exercise 1.9
;; Each of the following two procedures defines a method for adding two
;; positive integers in terms of the procedures `inc`, which increments
;; its argument by 1, and `dec`, which decrements its arguments by 1.
;; Use the substitution model, illustrate the process generated by each
;; procedure in evaluating (plus 4 5). Are these processes iterative or
;; recursive?
;;
;; Open scheme interactive mode (determined by your interpreter).
;; If you use guile interpreter, follow the tips:
;; 
;; scheme@(guile-user)> (load "exercise_09.scm")
;; scheme@(guile-user)> ,trace (first-plus 4 5)
;; scheme@(guile-user)> ,trace (second-plus 4 5)
;;
;; If you use mit-scheme, follow the tips:
;; 
;; ]=> (load "exercise_09.scm")
;; ]=> (trace first-plus)
;; ]=> (first-plus 4 5)
;; ]=> (trace second-plus)
;; ]=> (second-plus 4 5)
;;
;; See what the interpreter will show.
;;

;; Two procedures do increments or decrements
(define (inc x) (+ x 1))
(define (dec x) (- x 1))

;; The first plus procedure
(define (first-plus a b)
  (if (= a 0)
      b
      (inc (first-plus (dec a) b))))

;; The second plus procedure
(define (second-plus a b)
  (if (= a 0)
      b
      (second-plus (dec a) (inc b))))

;; Use trace to report every call to that plus procedure. This is really
;; useful to see the computing process. But before doing that, check how
;; how to use trace to ensure the normal work of interpreter.
;; If you use GUILE, try `,trace`:
;; https://www.gnu.org/software/guile/manual/html_node/Tracing-Traps.html
;; Try (trace procedure) in mit-scheme.
;;
;; Trace the two plus procedures:
;; The first plus procedure `first-plus` is recursive while the other
;; `second-plus` is iterative.
;; 
;; If you use GUILE interpreter, it will show you the following lines:
;;
;; trace: (first-plus 4 5)
;; trace: |  (dec 4)
;; trace: |  3
;; trace: |  (first-plus 3 5)
;; trace: |  |  (dec 3)
;; trace: |  |  2
;; trace: |  |  (first-plus 2 5)
;; trace: |  |  |  (dec 2)
;; trace: |  |  |  1
;; trace: |  |  |  (first-plus 1 5)
;; trace: |  |  |  |  (dec 1)
;; trace: |  |  |  |  0
;; trace: |  |  |  |  (first-plus 0 5)
;; trace: |  |  |  |  5
;; trace: |  |  |  (inc 5)
;; trace: |  |  |  6
;; trace: |  |  (inc 6)
;; trace: |  |  7
;; trace: |  (inc 7)
;; trace: |  8
;; trace: (inc 8)
;; trace: 9
;;
;; trace: (second-plus 4 5)
;; trace: |  (dec 4)
;; trace: |  3
;; trace: |  (inc 5)
;; trace: |  6
;; trace: (second-plus 3 6)
;; trace: |  (dec 3)
;; trace: |  2
;; trace: |  (inc 6)
;; trace: |  7
;; trace: (second-plus 2 7)
;; trace: |  (dec 2)
;; trace: |  1
;; trace: |  (inc 7)
;; trace: |  8
;; trace: (second-plus 1 8)
;; trace: |  (dec 1)
;; trace: |  0
;; trace: |  (inc 8)
;; trace: |  9
;; trace: (second-plus 0 9)
;; trace: 9
;;
;; In mit-scheme, you will get the similar result.
;;


