;; The solution of exercise 1.15
;; The sine of an angle (specified in radians) can be computed by making
;; use of the approximation: sin x = x + o(x ^ 3) -> sin x = x, if x is
;; sufficiently small, and the trigonometric identity
;;
;;     sin r = 3 * sin (r / 3) - 4 * sin (r / 3) ^ 3
;;
;; to reduce the size of the argument of `sin`. (For purposes of this
;; exercise an angle is considered "sufficiently small" if its magnitude is
;; not greater than 0.1 radians.) These ideas are incorporated in the foll-
;; owing procedures:
;;

;; Use the default exponential function
;; (define (cube x) (* x x x)) is also available in this exercise
(define (cube x) (expt x 3))
(define (p x) (- (* 3 x) (* 4 (cube x))))

;; The absolute value of a number
(define (abs x)
  (if (< x 0) (- x) x))

;; The new sin function
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))

;;
;; [1] How many times is the procedure p applied when (sine 12.15) is
;;     evaluated?
;;
;; [2] What is the order of growth in space and number of steps (as a
;;     function of a) used by the process generated by the sine procedure
;;     when (sine a) is evaluated?
;;
;; Use trace function to see number of times the procedure is applied!
;; (,trace in guile interpreter.)
;;
;; trace: (sine 12.15)
;; trace: |  (abs 12.15)
;; trace: |  12.15
;; trace: |  (sine 4.05)
;; trace: |  |  (abs 4.05)
;; trace: |  |  4.05
;; trace: |  |  (sine 1.3499999999999999)
;; trace: |  |  |  (abs 1.3499999999999999)
;; trace: |  |  |  1.3499999999999999
;; trace: |  |  |  (sine 0.44999999999999996)
;; trace: |  |  |  |  (abs 0.44999999999999996)
;; trace: |  |  |  |  0.44999999999999996
;; trace: |  |  |  |  (sine 0.15)
;; trace: |  |  |  |  |  (abs 0.15)
;; trace: |  |  |  |  |  0.15
;; trace: |  |  |  |  |  (sine 0.049999999999999996)
;; trace: |  |  |  |  |  |  (abs 0.049999999999999996)
;; trace: |  |  |  |  |  |  0.049999999999999996
;; trace: |  |  |  |  |  0.049999999999999996
;; trace: |  |  |  |  (p 0.049999999999999996)
;; trace: |  |  |  |  |  (cube 0.049999999999999996)
;; trace: |  |  |  |  |  (expt 0.049999999999999996 3)
;; trace: |  |  |  |  |  1.2499999999999998e-4
;; trace: |  |  |  |  0.1495
;; trace: |  |  |  (p 0.1495)
;; trace: |  |  |  |  (cube 0.1495)
;; trace: |  |  |  |  (expt 0.1495 3)
;; trace: |  |  |  |  0.003341362375
;; trace: |  |  |  0.4351345505
;; trace: |  |  (p 0.4351345505)
;; trace: |  |  |  (cube 0.4351345505)
;; trace: |  |  |  (expt 0.4351345505 3)
;; trace: |  |  |  0.08238927958303073
;; trace: |  |  0.9758465331678772
;; trace: |  (p 0.9758465331678772)
;; trace: |  |  (cube 0.9758465331678772)
;; trace: |  |  (expt 0.9758465331678772 3)
;; trace: |  |  0.9292756784936136
;; trace: |  -0.7895631144708228
;; trace: (p -0.7895631144708228)
;; trace: |  (cube -0.7895631144708228)
;; trace: |  (expt -0.7895631144708228 3)
;; trace: |  -0.4922214714997821
;; trace: -0.39980345741334
;;
;; The procedure `p` is called 5 times!
;; The time and space complexity are both O(log a)
;;

(define (main)
  (display "Compute sine function sine(x) approximately.\nInput x: ")
  (let ((x (read)))
    (display "[Approximate value] sine(")
    (display x) (display ") = ")
    (display (sine x)))
  (newline))

(main)


